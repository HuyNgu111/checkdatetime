import java.time.LocalDateTime;
import java.time.DayOfWeek;

public class DateTimeChecker {
    
    /**
     * Ki·ªÉm tra xem ng√†y ƒë√£ cho c√≥ ph·∫£i l√† cu·ªëi tu·∫ßn kh√¥ng
     * @param dateTime th·ªùi gian c·∫ßn ki·ªÉm tra
     * @return true n·∫øu l√† cu·ªëi tu·∫ßn (th·ª© 7 ho·∫∑c ch·ªß nh·∫≠t), false n·∫øu kh√¥ng
     */
    public static boolean isWeekend(LocalDateTime dateTime) {
        DayOfWeek day = dateTime.getDayOfWeek();
        return day == DayOfWeek.SATURDAY || day == DayOfWeek.SUNDAY;
    }
    
    /**
     * Ki·ªÉm tra xem gi·ªù ƒë√£ cho c√≥ ph·∫£i l√† gi·ªù l√†m vi·ªác kh√¥ng (8h - 17h)
     * @param dateTime th·ªùi gian c·∫ßn ki·ªÉm tra
     * @return true n·∫øu trong gi·ªù l√†m vi·ªác, false n·∫øu kh√¥ng
     */
    public static boolean isWorkingHours(LocalDateTime dateTime) {
        int hour = dateTime.getHour();
        return hour >= 8 && hour <= 17;
    }
    
    /**
     * Ki·ªÉm tra xem c√≥ ph·∫£i l√† ng√†y l√†m vi·ªác kh√¥ng (kh√¥ng ph·∫£i cu·ªëi tu·∫ßn v√† trong gi·ªù l√†m vi·ªác)
     * @param dateTime th·ªùi gian c·∫ßn ki·ªÉm tra
     * @return true n·∫øu l√† ng√†y l√†m vi·ªác, false n·∫øu kh√¥ng
     */
    public static boolean isWorkingDay(LocalDateTime dateTime) {
        return !isWeekend(dateTime) && isWorkingHours(dateTime);
    }
    
    /**
     * L·∫•y th√¥ng ƒëi·ªáp m√¥ t·∫£ v·ªÅ t√¨nh tr·∫°ng cu·ªëi tu·∫ßn
     * @param dateTime th·ªùi gian c·∫ßn ki·ªÉm tra
     * @return th√¥ng ƒëi·ªáp m√¥ t·∫£
     */
    public static String getWeekendMessage(LocalDateTime dateTime) {
        if (isWeekend(dateTime)) {
            return "H√¥m nay l√† cu·ªëi tu·∫ßn üéâ";
        } else {
            return "H√¥m nay l√† ng√†y trong tu·∫ßn üìÖ";
        }
    }
    
    /**
     * L·∫•y th√¥ng ƒëi·ªáp m√¥ t·∫£ v·ªÅ t√¨nh tr·∫°ng gi·ªù l√†m vi·ªác
     * @param dateTime th·ªùi gian c·∫ßn ki·ªÉm tra
     * @return th√¥ng ƒëi·ªáp m√¥ t·∫£
     */
    public static String getWorkingHoursMessage(LocalDateTime dateTime) {
        if (isWorkingHours(dateTime)) {
            return "ƒêang trong gi·ªù l√†m vi·ªác ‚è∞";
        } else {
            return "Ngo√†i gi·ªù l√†m vi·ªác üí§";
        }
    }
    
    /**
     * Ki·ªÉm tra xem c√≥ ph·∫£i l√† gi·ªù ngh·ªâ tr∆∞a kh√¥ng (12h - 13h)
     * @param dateTime th·ªùi gian c·∫ßn ki·ªÉm tra
     * @return true n·∫øu l√† gi·ªù ngh·ªâ tr∆∞a, false n·∫øu kh√¥ng
     */
    public static boolean isLunchTime(LocalDateTime dateTime) {
        int hour = dateTime.getHour();
        return hour >= 12 && hour < 13;
    }
    
    /**
     * Ki·ªÉm tra xem c√≥ ph·∫£i l√† bu·ªïi s√°ng kh√¥ng (6h - 12h)
     * @param dateTime th·ªùi gian c·∫ßn ki·ªÉm tra
     * @return true n·∫øu l√† bu·ªïi s√°ng, false n·∫øu kh√¥ng
     */
    public static boolean isMorning(LocalDateTime dateTime) {
        int hour = dateTime.getHour();
        return hour >= 6 && hour < 12;
    }
    
    /**
     * Ki·ªÉm tra xem c√≥ ph·∫£i l√† bu·ªïi t·ªëi kh√¥ng (18h - 22h)
     * @param dateTime th·ªùi gian c·∫ßn ki·ªÉm tra
     * @return true n·∫øu l√† bu·ªïi t·ªëi, false n·∫øu kh√¥ng
     */
    public static boolean isEvening(LocalDateTime dateTime) {
        int hour = dateTime.getHour();
        return hour >= 18 && hour < 22;
    }
    
    /**
     * Ki·ªÉm tra xem c√≥ ph·∫£i l√† ƒë√™m khuya kh√¥ng (22h - 6h)
     * @param dateTime th·ªùi gian c·∫ßn ki·ªÉm tra
     * @return true n·∫øu l√† ƒë√™m khuya, false n·∫øu kh√¥ng
     */
    public static boolean isLateNight(LocalDateTime dateTime) {
        int hour = dateTime.getHour();
        return hour >= 22 || hour < 6;
    }
    
    /**
     * Ki·ªÉm tra xem c√≥ ph·∫£i l√† bu·ªïi chi·ªÅu kh√¥ng (12h - 18h)
     * @param dateTime th·ªùi gian c·∫ßn ki·ªÉm tra
     * @return true n·∫øu l√† bu·ªïi chi·ªÅu, false n·∫øu kh√¥ng
     */
    public static boolean isAfternoon(LocalDateTime dateTime) {
        int hour = dateTime.getHour();
        return hour >= 12 && hour < 18;
    }
    
    /**
     * Ki·ªÉm tra xem c√≥ ph·∫£i l√† gi·ªù cao ƒëi·ªÉm s√°ng kh√¥ng (7h - 9h)
     * @param dateTime th·ªùi gian c·∫ßn ki·ªÉm tra
     * @return true n·∫øu l√† gi·ªù cao ƒëi·ªÉm s√°ng, false n·∫øu kh√¥ng
     */
    public static boolean isMorningRush(LocalDateTime dateTime) {
        int hour = dateTime.getHour();
        return hour >= 7 && hour < 9;
    }
    
    /**
     * Ki·ªÉm tra xem c√≥ ph·∫£i l√† gi·ªù cao ƒëi·ªÉm chi·ªÅu kh√¥ng (17h - 19h)
     * @param dateTime th·ªùi gian c·∫ßn ki·ªÉm tra
     * @return true n·∫øu l√† gi·ªù cao ƒëi·ªÉm chi·ªÅu, false n·∫øu kh√¥ng
     */
    public static boolean isEveningRush(LocalDateTime dateTime) {
        int hour = dateTime.getHour();
        return hour >= 17 && hour < 19;
    }
    
    /**
     * L·∫•y th√¥ng ƒëi·ªáp m√¥ t·∫£ chi ti·∫øt v·ªÅ th·ªùi gian trong ng√†y
     * @param dateTime th·ªùi gian c·∫ßn ki·ªÉm tra
     * @return th√¥ng ƒëi·ªáp m√¥ t·∫£ chi ti·∫øt
     */
    public static String getDetailedTimeMessage(LocalDateTime dateTime) {
        if (isLateNight(dateTime)) {
            return "ƒê√¢y l√† th·ªùi gian ƒë√™m khuya üåô";
        } else if (isMorning(dateTime)) {
            if (isMorningRush(dateTime)) {
                return "Bu·ªïi s√°ng - Gi·ªù cao ƒëi·ªÉm üöó";
            } else {
                return "Bu·ªïi s√°ng - Th·ªùi gian tho·∫£i m√°i ‚òÄÔ∏è";
            }
        } else if (isLunchTime(dateTime)) {
            return "Gi·ªù ngh·ªâ tr∆∞a - Th·ªùi gian ƒÉn tr∆∞a üçΩÔ∏è";
        } else if (isAfternoon(dateTime)) {
            return "Bu·ªïi chi·ªÅu - Th·ªùi gian l√†m vi·ªác üíº";
        } else if (isEvening(dateTime)) {
            if (isEveningRush(dateTime)) {
                return "Bu·ªïi t·ªëi - Gi·ªù cao ƒëi·ªÉm v·ªÅ nh√† üè†";
            } else {
                return "Bu·ªïi t·ªëi - Th·ªùi gian ngh·ªâ ng∆°i üåÜ";
            }
        } else {
            return "Th·ªùi gian kh√°c trong ng√†y ‚è∞";
        }
    }
    
    /**
     * Ki·ªÉm tra c√≥ ph·∫£i l√† ng√†y ƒë·∫∑c bi·ªát kh√¥ng (d·ª±a v√†o ng√†y trong th√°ng)
     * @param dateTime th·ªùi gian c·∫ßn ki·ªÉm tra
     * @return true n·∫øu l√† ng√†y ƒë·∫∑c bi·ªát, false n·∫øu kh√¥ng
     */
    public static boolean isSpecialDay(LocalDateTime dateTime) {
        int day = dateTime.getDayOfMonth();
        // Ng√†y ƒë·∫∑c bi·ªát: 1, 15, cu·ªëi th√°ng (28, 29, 30, 31)
        return day == 1 || day == 15 || day >= 28;
    }
    
    /**
     * T√≠nh to√°n s·ªë gi·ªù c√≤n l·∫°i ƒë·∫øn cu·ªëi ng√†y l√†m vi·ªác
     * @param dateTime th·ªùi gian hi·ªán t·∫°i
     * @return s·ªë gi·ªù c√≤n l·∫°i, -1 n·∫øu ƒë√£ h·∫øt gi·ªù l√†m vi·ªác
     */
    public static int getHoursUntilEndOfWork(LocalDateTime dateTime) {
        int currentHour = dateTime.getHour();
        if (currentHour < 8) {
            return 9; // 17 - 8 = 9 gi·ªù l√†m vi·ªác
        } else if (currentHour >= 8 && currentHour < 17) {
            return 17 - currentHour;
        } else {
            return -1; // ƒê√£ h·∫øt gi·ªù l√†m vi·ªác
        }
    }

    public static void main(String[] args) {
        LocalDateTime now = LocalDateTime.now();

        System.out.println("Th·ªùi gian hi·ªán t·∫°i: " + now);
        System.out.println(getWeekendMessage(now));
        System.out.println(getWorkingHoursMessage(now));
    }
}
