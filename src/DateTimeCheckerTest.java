import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import static org.junit.jupiter.api.Assertions.*;
import java.time.LocalDateTime;

/**
 * Test class cho DateTimeChecker
 * Ch·ª©a 8 test cases ƒë·ªÉ ki·ªÉm tra c√°c ph∆∞∆°ng th·ª©c trong DateTimeChecker
 */
public class DateTimeCheckerTest {

    @Test
    @DisplayName("Test 1: Ki·ªÉm tra cu·ªëi tu·∫ßn - Th·ª© 7")
    public void testIsWeekendSaturday() {
        // T·∫°o m·ªôt ng√†y th·ª© 7 (Saturday)
        LocalDateTime saturday = LocalDateTime.of(2024, 12, 21, 10, 0); // 21/12/2024 l√† th·ª© 7
        
        assertTrue(DateTimeChecker.isWeekend(saturday), 
                   "Th·ª© 7 ph·∫£i ƒë∆∞·ª£c x√°c ƒë·ªãnh l√† cu·ªëi tu·∫ßn");
    }

    @Test
    @DisplayName("Test 2: Ki·ªÉm tra cu·ªëi tu·∫ßn - Ch·ªß nh·∫≠t")
    public void testIsWeekendSunday() {
        // T·∫°o m·ªôt ng√†y ch·ªß nh·∫≠t (Sunday)
        LocalDateTime sunday = LocalDateTime.of(2024, 12, 22, 15, 30); // 22/12/2024 l√† ch·ªß nh·∫≠t
        
        assertTrue(DateTimeChecker.isWeekend(sunday), 
                   "Ch·ªß nh·∫≠t ph·∫£i ƒë∆∞·ª£c x√°c ƒë·ªãnh l√† cu·ªëi tu·∫ßn");
    }

    @Test
    @DisplayName("Test 3: Ki·ªÉm tra ng√†y trong tu·∫ßn - Th·ª© 2")
    public void testIsNotWeekendMonday() {
        // T·∫°o m·ªôt ng√†y th·ª© 2 (Monday)
        LocalDateTime monday = LocalDateTime.of(2024, 12, 23, 9, 0); // 23/12/2024 l√† th·ª© 2
        
        assertFalse(DateTimeChecker.isWeekend(monday), 
                    "Th·ª© 2 kh√¥ng ph·∫£i l√† cu·ªëi tu·∫ßn");
    }

    @Test
    @DisplayName("Test 4: Ki·ªÉm tra gi·ªù l√†m vi·ªác - Trong kho·∫£ng 8h-17h")
    public void testIsWorkingHoursValid() {
        // T·∫°o th·ªùi gian trong gi·ªù l√†m vi·ªác (10:30 AM)
        LocalDateTime workingTime = LocalDateTime.of(2024, 12, 23, 10, 30);
        
        assertTrue(DateTimeChecker.isWorkingHours(workingTime), 
                   "10:30 AM ph·∫£i ƒë∆∞·ª£c x√°c ƒë·ªãnh l√† gi·ªù l√†m vi·ªác");
        
        // Ki·ªÉm tra bi√™n 8h
        LocalDateTime startWork = LocalDateTime.of(2024, 12, 23, 8, 0);
        assertTrue(DateTimeChecker.isWorkingHours(startWork), 
                   "8:00 AM ph·∫£i ƒë∆∞·ª£c x√°c ƒë·ªãnh l√† gi·ªù l√†m vi·ªác");
        
        // Ki·ªÉm tra bi√™n 17h
        LocalDateTime endWork = LocalDateTime.of(2024, 12, 23, 17, 0);
        assertTrue(DateTimeChecker.isWorkingHours(endWork), 
                   "5:00 PM ph·∫£i ƒë∆∞·ª£c x√°c ƒë·ªãnh l√† gi·ªù l√†m vi·ªác");
    }

    @Test
    @DisplayName("Test 5: Ki·ªÉm tra ngo√†i gi·ªù l√†m vi·ªác")
    public void testIsNotWorkingHours() {
        // T·∫°o th·ªùi gian ngo√†i gi·ªù l√†m vi·ªác (6:00 AM)
        LocalDateTime earlyMorning = LocalDateTime.of(2024, 12, 23, 6, 0);
        assertFalse(DateTimeChecker.isWorkingHours(earlyMorning), 
                    "6:00 AM kh√¥ng ph·∫£i l√† gi·ªù l√†m vi·ªác");
        
        // T·∫°o th·ªùi gian t·ªëi (19:00)
        LocalDateTime evening = LocalDateTime.of(2024, 12, 23, 19, 0);
        assertFalse(DateTimeChecker.isWorkingHours(evening), 
                    "7:00 PM kh√¥ng ph·∫£i l√† gi·ªù l√†m vi·ªác");
    }

    @Test
    @DisplayName("Test 6: Ki·ªÉm tra ng√†y l√†m vi·ªác (kh√¥ng ph·∫£i cu·ªëi tu·∫ßn v√† trong gi·ªù l√†m vi·ªác)")
    public void testIsWorkingDay() {
        // T·∫°o ng√†y l√†m vi·ªác: Th·ª© 3, 14:00
        LocalDateTime workingDay = LocalDateTime.of(2024, 12, 24, 14, 0); // 24/12/2024 l√† th·ª© 3
        
        assertTrue(DateTimeChecker.isWorkingDay(workingDay), 
                   "Th·ª© 3 l√∫c 2:00 PM ph·∫£i ƒë∆∞·ª£c x√°c ƒë·ªãnh l√† ng√†y l√†m vi·ªác");
        
        // T·∫°o cu·ªëi tu·∫ßn trong gi·ªù l√†m vi·ªác: Th·ª© 7, 10:00
        LocalDateTime weekendWorkingHour = LocalDateTime.of(2024, 12, 21, 10, 0);
        assertFalse(DateTimeChecker.isWorkingDay(weekendWorkingHour), 
                    "Th·ª© 7 kh√¥ng ph·∫£i l√† ng√†y l√†m vi·ªác d√π trong gi·ªù l√†m vi·ªác");
    }

    @Test
    @DisplayName("Test 7: Ki·ªÉm tra gi·ªù ngh·ªâ tr∆∞a (12h-13h)")
    public void testIsLunchTime() {
        // T·∫°o th·ªùi gian ngh·ªâ tr∆∞a (12:30)
        LocalDateTime lunchTime = LocalDateTime.of(2024, 12, 23, 12, 30);
        assertTrue(DateTimeChecker.isLunchTime(lunchTime), 
                   "12:30 PM ph·∫£i ƒë∆∞·ª£c x√°c ƒë·ªãnh l√† gi·ªù ngh·ªâ tr∆∞a");
        
        // Ki·ªÉm tra bi√™n b·∫Øt ƒë·∫ßu (12:00)
        LocalDateTime lunchStart = LocalDateTime.of(2024, 12, 23, 12, 0);
        assertTrue(DateTimeChecker.isLunchTime(lunchStart), 
                   "12:00 PM ph·∫£i ƒë∆∞·ª£c x√°c ƒë·ªãnh l√† gi·ªù ngh·ªâ tr∆∞a");
        
        // Ki·ªÉm tra ngo√†i gi·ªù ngh·ªâ tr∆∞a (13:00)
        LocalDateTime afterLunch = LocalDateTime.of(2024, 12, 23, 13, 0);
        assertFalse(DateTimeChecker.isLunchTime(afterLunch), 
                    "1:00 PM kh√¥ng ph·∫£i l√† gi·ªù ngh·ªâ tr∆∞a");
    }

    @Test
    @DisplayName("Test 8: Ki·ªÉm tra bu·ªïi s√°ng, bu·ªïi t·ªëi v√† message functions")
    public void testTimePeriodsAndMessages() {
        // Test bu·ªïi s√°ng (8:00 AM)
        LocalDateTime morning = LocalDateTime.of(2024, 12, 23, 8, 0);
        assertTrue(DateTimeChecker.isMorning(morning), 
                   "8:00 AM ph·∫£i ƒë∆∞·ª£c x√°c ƒë·ªãnh l√† bu·ªïi s√°ng");
        
        // Test bu·ªïi t·ªëi (20:00)
        LocalDateTime evening = LocalDateTime.of(2024, 12, 23, 20, 0);
        assertTrue(DateTimeChecker.isEvening(evening), 
                   "8:00 PM ph·∫£i ƒë∆∞·ª£c x√°c ƒë·ªãnh l√† bu·ªïi t·ªëi");
        
        // Test weekend message
        LocalDateTime saturday = LocalDateTime.of(2024, 12, 21, 10, 0);
        String weekendMsg = DateTimeChecker.getWeekendMessage(saturday);
        assertEquals("H√¥m nay l√† cu·ªëi tu·∫ßn üéâ", weekendMsg, 
                     "Message cu·ªëi tu·∫ßn kh√¥ng ch√≠nh x√°c");
        
        // Test working hours message
        LocalDateTime workingTime = LocalDateTime.of(2024, 12, 23, 10, 0);
        String workingMsg = DateTimeChecker.getWorkingHoursMessage(workingTime);
        assertEquals("ƒêang trong gi·ªù l√†m vi·ªác ‚è∞", workingMsg, 
                     "Message gi·ªù l√†m vi·ªác kh√¥ng ch√≠nh x√°c");
        
        // Test non-working hours message
        LocalDateTime nonWorkingTime = LocalDateTime.of(2024, 12, 23, 6, 0);
        String nonWorkingMsg = DateTimeChecker.getWorkingHoursMessage(nonWorkingTime);
        assertEquals("Ngo√†i gi·ªù l√†m vi·ªác üí§", nonWorkingMsg, 
                     "Message ngo√†i gi·ªù l√†m vi·ªác kh√¥ng ch√≠nh x√°c");
    }
}