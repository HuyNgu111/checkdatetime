package checkdatetime;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.AfterAll;
import static org.junit.jupiter.api.Assertions.*;

import java.time.LocalDateTime;

@DisplayName("DateTimeChecker Test Suite - Coverage: 100%")
public class DateTimeCheckerTest {
    
    private static int totalTests = 0;
    private static int passedTests = 0;
    private static final int TOTAL_METHODS = 8;
    
    @BeforeAll
    static void setup() {
        System.out.println("\n=== Starting DateTimeChecker Tests ===");
        System.out.println("Total Methods to Test: " + TOTAL_METHODS);
    }
    
    @Test
    @DisplayName("[25%] Test 1: Cu·ªëi tu·∫ßn - Th·ª© 7")
    void testIsWeekendSaturday() {
        System.out.println("üìä Coverage: 25% (2/8 methods)");
        totalTests++;
        LocalDateTime saturday = LocalDateTime.of(2025, 10, 18, 14, 30);
        
        assertTrue(DateTimeChecker.isWeekend(saturday), 
                  "Th·ª© 7 ph·∫£i l√† cu·ªëi tu·∫ßn");
        assertTrue(DateTimeChecker.isWorkingHours(saturday), 
                  "14:30 ph·∫£i l√† gi·ªù l√†m vi·ªác");
        
        passedTests++;
        printCoverage(2); // 2/8 methods tested
    }
    
    @Test
    @DisplayName("[25%] Test 2: Cu·ªëi tu·∫ßn - Ch·ªß nh·∫≠t")
    void testIsWeekendSunday() {
        System.out.println("üìä Coverage: 25% (2/8 methods)");
        totalTests++;
        LocalDateTime sunday = LocalDateTime.of(2025, 10, 19, 10, 0);
        
        assertTrue(DateTimeChecker.isWeekend(sunday), 
                  "Ch·ªß nh·∫≠t ph·∫£i l√† cu·ªëi tu·∫ßn");
        assertTrue(DateTimeChecker.isMorning(sunday), 
                  "10:00 ph·∫£i l√† bu·ªïi s√°ng");
        
        passedTests++;
        printCoverage(2);
    }
    
    @Test
    @DisplayName("[25%] Test 3: Ng√†y th∆∞·ªùng - Th·ª© Hai")
    void testIsNotWeekendMonday() {
        System.out.println("üìä Coverage: 25% (2/8 methods)");
        totalTests++;
        LocalDateTime monday = LocalDateTime.of(2025, 10, 13, 9, 0);
        
        assertFalse(DateTimeChecker.isWeekend(monday), 
                   "Th·ª© Hai kh√¥ng ph·∫£i cu·ªëi tu·∫ßn");
        assertTrue(DateTimeChecker.isWorkingHours(monday), 
                  "9:00 l√† gi·ªù l√†m vi·ªác");
        
        passedTests++;
        printCoverage(2);
    }
    
    @Test
    @DisplayName("[13%] Test 4: Gi·ªù l√†m vi·ªác h·ª£p l·ªá")
    void testIsWorkingHoursValid() {
        System.out.println("üìä Coverage: 13% (1/8 methods)");
        totalTests++;
        LocalDateTime workTime = LocalDateTime.of(2025, 10, 16, 9, 30);
        
        assertTrue(DateTimeChecker.isWorkingHours(workTime), 
                  "9:30 ph·∫£i l√† gi·ªù l√†m vi·ªác");
        
        passedTests++;
        printCoverage(1);
    }
    
    @Test
    @DisplayName("[13%] Test 5: Ngo√†i gi·ªù l√†m vi·ªác")
    void testIsNotWorkingHours() {
        System.out.println("üìä Coverage: 13% (1/8 methods)");
        totalTests++;
        LocalDateTime afterWork = LocalDateTime.of(2025, 10, 16, 19, 0);
        
        assertFalse(DateTimeChecker.isWorkingHours(afterWork), 
                   "19:00 kh√¥ng ph·∫£i gi·ªù l√†m vi·ªác");
        
        passedTests++;
        printCoverage(1);
    }
    
    @Test
    @DisplayName("[38%] Test 6: Ng√†y l√†m vi·ªác")
    void testIsWorkingDay() {
        System.out.println("üìä Coverage: 38% (3/8 methods)");
        totalTests++;
        LocalDateTime workday = LocalDateTime.of(2025, 10, 16, 14, 0);
        
        assertFalse(DateTimeChecker.isWeekend(workday), 
                   "Th·ª© 5 kh√¥ng ph·∫£i cu·ªëi tu·∫ßn");
        assertTrue(DateTimeChecker.isWorkingHours(workday), 
                  "14:00 l√† gi·ªù l√†m vi·ªác");
        assertTrue(DateTimeChecker.isWorkingDay(workday), 
                  "Th·ª© 5 14:00 l√† ng√†y l√†m vi·ªác");
        
        passedTests++;
        printCoverage(3);
    }
    
    @Test
    @DisplayName("[13%] Test 7: Gi·ªù ngh·ªâ tr∆∞a (12h-13h)")
    void testIsLunchTime() {
        System.out.println("üìä Coverage: 13% (1/8 methods)");
        totalTests++;
        LocalDateTime lunchTime = LocalDateTime.of(2025, 10, 16, 12, 30);
        
        assertTrue(DateTimeChecker.isLunchTime(lunchTime), 
                  "12:30 ph·∫£i l√† gi·ªù ngh·ªâ tr∆∞a");
        
        passedTests++;
        printCoverage(1);
    }
    
    @Test
    @DisplayName("[13%] Test 8: Bu·ªïi s√°ng")
    void testIsMorning() {
        System.out.println("üìä Coverage: 13% (1/8 methods)");
        totalTests++;
        LocalDateTime morning = LocalDateTime.of(2025, 10, 16, 7, 0);
        
        assertTrue(DateTimeChecker.isMorning(morning), 
                  "7:00 ph·∫£i l√† bu·ªïi s√°ng");
        
        passedTests++;
        printCoverage(1);
    }
    
    @Test
    @DisplayName("[13%] Test 9: ƒê√™m khuya")
    void testIsNotMorning() {
        System.out.println("üìä Coverage: 13% (1/8 methods)");
        totalTests++;
        LocalDateTime night = LocalDateTime.of(2025, 10, 16, 23, 0);
        
        assertFalse(DateTimeChecker.isMorning(night), 
                   "23:00 kh√¥ng ph·∫£i bu·ªïi s√°ng");
        
        passedTests++;
        printCoverage(1);
    }
    
    @Test
    @DisplayName("[13%] Test 10: Bu·ªïi t·ªëi")
    void testIsEvening() {
        System.out.println("üìä Coverage: 13% (1/8 methods)");
        totalTests++;
        LocalDateTime evening = LocalDateTime.of(2025, 10, 16, 20, 0);
        
        assertTrue(DateTimeChecker.isEvening(evening), 
                  "20:00 ph·∫£i l√† bu·ªïi t·ªëi");
        
        passedTests++;
        printCoverage(1);
    }
    
    @Test
    @DisplayName("[25%] Test 11: Gi·ªù cao ƒëi·ªÉm s√°ng")
    void testMorningRushHour() {
        System.out.println("üìä Coverage: 25% (2/8 methods)");
        totalTests++;
        LocalDateTime rushHour = LocalDateTime.of(2025, 10, 16, 8, 0);
        
        assertTrue(DateTimeChecker.isMorning(rushHour), 
                  "8:00 l√† bu·ªïi s√°ng");
        assertTrue(DateTimeChecker.isWorkingHours(rushHour), 
                  "8:00 l√† gi·ªù l√†m vi·ªác");
        
        passedTests++;
        printCoverage(2);
    }
    
    @Test
    @DisplayName("[13%] Test 12: Gi·ªù cao ƒëi·ªÉm chi·ªÅu")
    void testEveningRushHour() {
        System.out.println("üìä Coverage: 13% (1/8 methods)");
        totalTests++;
        LocalDateTime rushHour = LocalDateTime.of(2025, 10, 16, 17, 0);
        
        assertTrue(DateTimeChecker.isWorkingHours(rushHour), 
                  "17:00 v·∫´n l√† gi·ªù l√†m vi·ªác");
        
        passedTests++;
        printCoverage(1);
    }
    
    @Test
    @DisplayName("[25%] Test 13: Th√¥ng ƒëi·ªáp chi ti·∫øt")
    void testTimePeriodsAndMessages() {
        System.out.println("üìä Coverage: 25% (2/8 methods)");
        totalTests++;
        LocalDateTime weekday = LocalDateTime.of(2025, 10, 16, 10, 0);
        
        String weekendMsg = DateTimeChecker.getWeekendMessage(weekday);
        String workMsg = DateTimeChecker.getWorkingHoursMessage(weekday);
        
        assertNotNull(weekendMsg, "Th√¥ng ƒëi·ªáp cu·ªëi tu·∫ßn kh√¥ng ƒë∆∞·ª£c null");
        assertNotNull(workMsg, "Th√¥ng ƒëi·ªáp gi·ªù l√†m kh√¥ng ƒë∆∞·ª£c null");
        assertTrue(weekendMsg.contains("ng√†y trong tu·∫ßn") || 
                  weekendMsg.contains("cu·ªëi tu·∫ßn"), 
                  "Th√¥ng ƒëi·ªáp ph·∫£i ch·ª©a th√¥ng tin v·ªÅ tu·∫ßn");
        
        passedTests++;
        printCoverage(2);
    }
    
    @Test
    @DisplayName("[50%] Test 14: Ng√†y ƒë·∫∑c bi·ªát üåü")
    void testSpecialDay() {
        System.out.println("üìä Coverage: 50% (4/8 methods) - HIGHEST!");
        totalTests++;
        // Ki·ªÉm tra m·ªôt ng√†y ƒë·∫∑c bi·ªát: ƒê·∫ßu gi·ªù l√†m vi·ªác c·ªßa th·ª© 2
        LocalDateTime mondayMorning = LocalDateTime.of(2025, 10, 13, 8, 0);
        
        assertFalse(DateTimeChecker.isWeekend(mondayMorning), 
                   "Th·ª© 2 kh√¥ng ph·∫£i cu·ªëi tu·∫ßn");
        assertTrue(DateTimeChecker.isWorkingHours(mondayMorning), 
                  "8:00 l√† gi·ªù l√†m vi·ªác");
        assertTrue(DateTimeChecker.isWorkingDay(mondayMorning), 
                  "Th·ª© 2 8:00 l√† ng√†y l√†m vi·ªác");
        assertTrue(DateTimeChecker.isMorning(mondayMorning), 
                  "8:00 l√† bu·ªïi s√°ng");
        
        passedTests++;
        printCoverage(4);
    }
    
    @AfterAll
    static void tearDown() {
        double successRate = (passedTests * 100.0) / totalTests;
        System.out.println("\n=== Test Summary ===");
        System.out.println("Total Tests Run: " + totalTests);
        System.out.println("Passed: " + passedTests);
        System.out.println("Failed: " + (totalTests - passedTests));
        System.out.printf("Success Rate: %.1f%%\n", successRate);
        System.out.println("Overall Coverage: 100% (All " + TOTAL_METHODS + " methods tested)");
        System.out.println("===================\n");
    }
    
    private void printCoverage(int methodsTested) {
        double coverage = (methodsTested * 100.0) / TOTAL_METHODS;
        System.out.printf("  ‚Üí Methods tested in this case: %d/%d (%.0f%%)\n", 
                         methodsTested, TOTAL_METHODS, coverage);
    }
}
