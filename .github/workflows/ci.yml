name: Java CI with JUnit and JaCoCo Coverage

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name:  Verify project structure
      run: |
        echo "=== Project Structure ==="
        ls -la
        echo "=== Source files ==="
        ls -la src/ 2>/dev/null || echo "No src directory"
        echo "=== Test file ==="
        ls -la DateTimeCheckerTest.java 2>/dev/null || echo "Test file not in root"
        ls -la test/DateTimeCheckerTest.java 2>/dev/null || echo "Test file not in test/"
        echo "=== Library files ==="
        ls -la lib/ 2>/dev/null || echo "No lib directory"
        
    - name: 📁 Create build directories
      run: |
        mkdir -p build/classes
        mkdir -p build/test-classes
        mkdir -p coverage
        
    - name: 🔨 Compile main source
      run: |
        echo "Compiling DateTimeChecker.java..."
        javac -encoding UTF-8 -cp "lib/*" -d build/classes src/DateTimeChecker.java
        echo "✓ Main source compiled"
        
    - name: 🧪 Compile test source
      run: |
        echo "Compiling test..."
        # Thử compile test file ở root trước
        if [ -f "DateTimeCheckerTest.java" ]; then
          echo "Found test in root directory"
          javac -encoding UTF-8 -cp "lib/*:build/classes" -d build/test-classes DateTimeCheckerTest.java
        elif [ -f "test/DateTimeCheckerTest.java" ]; then
          echo "Found test in test/ directory, copying to root..."
          cp test/DateTimeCheckerTest.java .
          javac -encoding UTF-8 -cp "lib/*:build/classes" -d build/test-classes DateTimeCheckerTest.java
        else
          echo "❌ Test file not found!"
          exit 1
        fi
        echo "✓ Test compiled"
        
    - name: 🚀 Run JUnit tests with JaCoCo coverage
      run: |
        echo "Running tests with coverage..."
        java -javaagent:lib/jacoco/jacocoagent.jar=destfile=coverage/jacoco.exec \
          -cp "build/classes:build/test-classes:lib/*" \
          org.junit.platform.console.ConsoleLauncher \
          --select-class=DateTimeCheckerTest \
          --details=summary
        echo "✓ Tests completed"
        
    - name: 📊 Generate coverage report
      run: |
        echo "Generating coverage reports..."
        java -jar lib/jacoco/jacococli.jar report coverage/jacoco.exec \
          --classfiles build/classes \
          --sourcefiles src \
          --html coverage/html \
          --xml coverage/coverage.xml \
          --csv coverage/coverage.csv
        echo "✓ Coverage generated"
        
    - name: 📈 Display coverage summary
      run: |
        echo "=== Coverage Summary ==="
        if [ -f coverage/coverage.csv ]; then
          head -5 coverage/coverage.csv
        fi
        
    - name: 📤 Upload coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: coverage/html/
        retention-days: 30
        
    - name: ✅ Build success
      if: success()
      run: |
        echo "========================================="
        echo "✅ BUILD SUCCESSFUL!"
        echo "========================================="
        echo "✓ Compilation: PASSED"
        echo "✓ Tests: PASSED"
        echo "✓ Coverage: GENERATED"
        echo "========================================="
        
    - name: ❌ Build failure
      if: failure()
      run: |
        echo "========================================="
        echo "❌ BUILD FAILED!"
        echo "Check logs above for details"
        echo "========================================="
